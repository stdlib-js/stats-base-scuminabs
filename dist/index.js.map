{
  "version": 3,
  "sources": ["../lib/scuminabs.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnanf = require( '@stdlib/math-base-assert-is-nanf' );\nvar abs = require( '@stdlib/math-base-special-abs' );\n\n\n// MAIN //\n\n/**\n* Computes the cumulative minimum absolute value of single-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Float32Array} output array\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n* var N = x.length;\n*\n* var v = scuminabs( N, x, 1, y, 1 );\n* // returns <Float32Array>[ 1.0, 1.0, 1.0 ]\n*/\nfunction scuminabs( N, x, strideX, y, strideY ) {\n\tvar min;\n\tvar ix;\n\tvar iy;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tmin = abs( x[ ix ] );\n\ty[ iy ] = min;\n\n\tiy += strideY;\n\ti = 1;\n\tif ( isnanf( min ) === false ) {\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tix += strideX;\n\t\t\tv = abs( x[ ix ] );\n\t\t\tif ( isnanf( v ) ) {\n\t\t\t\tmin = v;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( v < min ) {\n\t\t\t\tmin = v;\n\t\t\t}\n\t\t\ty[ iy ] = min;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\tif ( isnanf( min ) ) {\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ty[ iy ] = min;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = scuminabs;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnanf = require( '@stdlib/math-base-assert-is-nanf' );\nvar abs = require( '@stdlib/math-base-special-abs' );\n\n\n// MAIN //\n\n/**\n* Computes the cumulative minimum absolute value of single-precision floating-point strided array elements.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {Float32Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {Float32Array} output array\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n* var N = floor( x.length / 2 );\n*\n* var v = scuminabs( N, x, 2, 1, y, 1, 0 );\n* // returns <Float32Array>[ 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction scuminabs( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar min;\n\tvar ix;\n\tvar iy;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\tmin = abs( x[ ix ] );\n\ty[ iy ] = min;\n\n\tiy += strideY;\n\ti = 1;\n\tif ( isnanf( min ) === false ) {\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tix += strideX;\n\t\t\tv = abs( x[ ix ] );\n\t\t\tif ( isnanf( v ) ) {\n\t\t\t\tmin = v;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( v < min ) {\n\t\t\t\tmin = v;\n\t\t\t}\n\t\t\ty[ iy ] = min;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\tif ( isnanf( min ) ) {\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ty[ iy ] = min;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = scuminabs;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar scuminabs = require( './scuminabs.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( scuminabs, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = scuminabs;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the cumulative minimum absolute value of single-precision floating-point strided array elements.\n*\n* @module @stdlib/stats-base-scuminabs\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var scuminabs = require( '@stdlib/stats-base-scuminabs' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var y = new Float32Array( x.length );\n* var N = x.length;\n*\n* scuminabs( N, x, 1, y, 1 );\n* // y => <Float32Array>[ 1.0, 1.0, 1.0 ]\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var scuminabs = require( '@stdlib/stats-base-scuminabs' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var y = new Float32Array( x.length );\n* var N = floor( x.length / 2 );\n*\n* scuminabs.ndarray( N, x, 2, 1, y, 1, 0 );\n* // y => <Float32Array>[ 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar scuminabs;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tscuminabs = main;\n} else {\n\tscuminabs = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = scuminabs;\n\n// exports: { \"ndarray\": \"scuminabs.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,kCAAmC,EACrDC,EAAM,QAAS,+BAAgC,EAyBnD,SAASC,EAAWC,EAAGC,EAAGC,EAASC,EAAGC,EAAU,CAC/C,IAAIC,EACAC,EACAC,EACA,EACAC,EAEJ,GAAKR,GAAK,EACT,OAAOG,EAiBR,GAfKD,EAAU,EACdI,GAAM,EAAEN,GAAKE,EAEbI,EAAK,EAEDF,EAAU,EACdG,GAAM,EAAEP,GAAKI,EAEbG,EAAK,EAENF,EAAMP,EAAKG,EAAGK,CAAG,CAAE,EACnBH,EAAGI,CAAG,EAAIF,EAEVE,GAAMH,EACNI,EAAI,EACCX,EAAQQ,CAAI,IAAM,GACtB,IAAMG,EAAGA,EAAIR,EAAGQ,IAAM,CAGrB,GAFAF,GAAMJ,EACN,EAAIJ,EAAKG,EAAGK,CAAG,CAAE,EACZT,EAAQ,CAAE,EAAI,CAClBQ,EAAM,EACN,KACD,CACK,EAAIA,IACRA,EAAM,GAEPF,EAAGI,CAAG,EAAIF,EACVE,GAAMH,CACP,CAED,GAAKP,EAAQQ,CAAI,EAChB,IAAMG,EAAGA,EAAIR,EAAGQ,IACfL,EAAGI,CAAG,EAAIF,EACVE,GAAMH,EAGR,OAAOD,CACR,CAKAP,EAAO,QAAUG,ICpGjB,IAAAU,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,kCAAmC,EACrDC,EAAM,QAAS,+BAAgC,EA4BnD,SAASC,EAAWC,EAAGC,EAAGC,EAASC,EAASC,EAAGC,EAASC,EAAU,CACjE,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKX,GAAK,EACT,OAAOI,EAUR,GARAI,EAAKL,EACLM,EAAKH,EAELC,EAAMT,EAAKG,EAAGO,CAAG,CAAE,EACnBJ,EAAGK,CAAG,EAAIF,EAEVE,GAAMJ,EACNM,EAAI,EACCd,EAAQU,CAAI,IAAM,GACtB,IAAMI,EAAGA,EAAIX,EAAGW,IAAM,CAGrB,GAFAH,GAAMN,EACNQ,EAAIZ,EAAKG,EAAGO,CAAG,CAAE,EACZX,EAAQa,CAAE,EAAI,CAClBH,EAAMG,EACN,KACD,CACKA,EAAIH,IACRA,EAAMG,GAEPN,EAAGK,CAAG,EAAIF,EACVE,GAAMJ,CACP,CAED,GAAKR,EAAQU,CAAI,EAChB,IAAMI,EAAGA,EAAIX,EAAGW,IACfP,EAAGK,CAAG,EAAIF,EACVE,GAAMJ,EAGR,OAAOD,CACR,CAKAR,EAAO,QAAUG,IChGjB,IAAAa,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAY,IACZC,EAAU,IAKdF,EAAaC,EAAW,UAAWC,CAAQ,EAK3CH,EAAO,QAAUE,ICiBjB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAU,QAAS,yBAA0B,EAC7CC,EAAO,IAKPC,EACAC,EAAMJ,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDE,EAASG,CAAI,EACjBD,EAAYD,EAEZC,EAAYC,EAMb,OAAO,QAAUD",
  "names": ["require_scuminabs", "__commonJSMin", "exports", "module", "isnanf", "abs", "scuminabs", "N", "x", "strideX", "y", "strideY", "min", "ix", "iy", "i", "require_ndarray", "__commonJSMin", "exports", "module", "isnanf", "abs", "scuminabs", "N", "x", "strideX", "offsetX", "y", "strideY", "offsetY", "min", "ix", "iy", "v", "i", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "scuminabs", "ndarray", "join", "tryRequire", "isError", "main", "scuminabs", "tmp"]
}
